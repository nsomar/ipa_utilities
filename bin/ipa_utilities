#!/usr/bin/env ruby

require 'commander/import'
require 'colorize'
require 'ipa_utilities'

HighLine.track_eof = false
Signal.trap("INT") {}

$verbose = false
global_option('--verbose') { $verbose = true }


program :version, IpaVersion::VERSION
program :description, 'A command-line interface for dealing with ipas'

program :help, 'Author', 'Omar Abdelhafith <o.arrabi@me.com>'
program :help, 'Website', 'http://nsomar.com'
program :help_formatter, :compact

default_command :help

command :verify do |c|
  c.syntax = 'ipa_utilities verify ipa_path [...]'
  c.summary = 'Verifies the ipa provision and signature information'

  c.example 'description', 'ipa_utilities verify ipa_path'
  c.option '-c', '--certificate certificate', 'Path of the push notification PEM certificate'
  c.option '-d', '--device UDID', 'UDID of device to check if its included in embedded provision profile'
  c.option '--devices', 'Show all the devices included in the provision profile'

  c.action do |args, options|
    begin
      ipa = IpaParser.new(parse_path(args, "ipa"))

      print_app_bundle(ipa)
      print_provision_profile(ipa.provision_profile, ipa.info_plist)
      verify_certificates(ipa.provision_profile, options.certificate) if options.certificate
      print_provisioned_devices(ipa.provision_profile) if options.devices
      search_udid(ipa.provision_profile, options.device) if options.device

    rescue Exception => err
      say_error err.message
    ensure
      ipa.cleanup
    end
  end
end

command :convert do |c|
  c.syntax = 'ipa_utilities convert p12_path [...]'
  c.summary = 'Convert a p12 to PEM'

  c.example 'description', 'ipa_utilities convert p12_file_path'
  c.option '-o', '--out output_path', 'Out put file for the Pem file'

  c.action do |args, options|

    path = parse_path(args, "p12")
    exit unless path

    output_path = options.out || "~/Desktop/out.pem"

    begin

      puts "\nConverting P12 to Pem"
      system "openssl pkcs12 -in '#{path}' -out '#{output_path}' -nodes -clcerts"
      output("Pem saved at ", output_path)

    ensure

    end
  end
end

command :certificate do |c|
  c.syntax = 'ipa_utilities certificate ipa [...]'
  c.summary = 'fetch the correct push identity from the provided ipa (WIP)'

  c.example 'description', 'ipa_utilities certificate ipa_path (WIP)'

  c.action do |args, options|

    path = parse_path args, "ipa"
    exit unless path

    begin
      ipa = IpaParser.new path

      apns_environment = ipa.provision_profile.production_apns? ? "Production" : "Development"
      identity_name = "Apple #{apns_environment} IOS Push Services: #{ipa.provision_profile.bundle_id}"

      output("Searching Keychain for identity ", identity_name)

      identities = `security find-identity -v -p ssl-client`

      if identities.lines.index { |s| s.include?(identity_name) }
        puts "Item found please export it from your keychain".green
      else
        puts "Item couldn't be found in your keychain".red
      end
    ensure
      ipa.cleanup
    end
  end
end

command :resign do |c|
  c.syntax = 'ipa_utilities resign ipa -p new_profile'
  c.summary = 'Resigns the passed ipa to the new passed profile'

  c.example 'description', 'ipa_utilities certificate ipa_path -p profile'
  c.option '-p', '--profile profile_path', 'Path of the provision profile to use'
  c.option '-i', '--identity Identity_name', 'The identity name'
  c.option '-b', '--bundle bundle_identifier', 'The new bundle identifier'
  c.option '-o', '--out output_path', 'Out put file for the Pem file'

  c.action do |args, options|
    begin
      path = parse_path(args, "ipa")

      raise "identity name is required with -i" unless options.identity

      signer = CodeSigner.new(ipa_path: path,
                              identity: options.identity,
                              profile: options.profile,
                              bundle_id: options.bundle,
                              output_path: options.out)
      signer.resign

    rescue Exception => err
      say_error err.message
    end
  end
end

def parse_path(args, title)
  raise "Path to #{title} is required" if args.nil? || args.empty?
  path = args.first
  raise "Couldn't find #{title} with path #{path}" unless File.exist?(path)

  path
end

def print_app_bundle(ipa)
  puts "______Bundle information______"
  output("App bundle name: ", ipa.bundle_name)
  output("App display name: ", ipa.info_plist.display_name)
  output("Verifying app bundle signature: ", "Signature Valid", "Signature Not Valid",
         CodeSigner.signature_valid?(ipa))

end

def verify_certificates(provision_profile, apns_certificate_path)
  puts "\n______Checking certificates______"

  apns_certificate = SigningIdentity.new(apns_certificate_path)

  if apns_certificate.apns?
    output("Certificate name: ", apns_certificate.name)
    output("Certificate environment: ", apns_certificate.environment)
    output("Certificate bundle id: ", apns_certificate.bundle_id)

    output("Certificate bundleId identical to App bundleId: ", "Yes", "No",
           apns_certificate.bundle_id == provision_profile.bundle_id)

    same_environment = apns_certificate.production? == provision_profile.production_apns?
    output("Provided certificate correct for the ipa: ", "Yes", "No", same_environment)

    unless same_environment
      puts %{\
The application was build with a provision profile containing aps-environment \
in `#{provision_profile.environment}` environment while the passed certificate environment is set \
to `#{apns_certificate.environment}`\
           \nTo fix this issue either export the correct \
iOS Push `#{apns_certificate.environment}` certificate from keychain or rebuild your app \
with the correct provision profile}.red
    end
  else
    puts "The passed certificate is not an APNS certificate".red
  end
end

def search_udid(provision_profile, device_udid)
  puts "\n______Searching provisioned device______"

  if provision_profile.app_store_build?
    puts "Distribution build do not contain provisioned devices".red
  else
    output("Number of embedded devices: ", provision_profile.provisioned_devices.count.to_s)
    output("Device with UDID `#{device_udid}`: ", "Yes", "No",
           provision_profile.provisioned_devices.include?(device_udid))
  end
end

def print_provisioned_devices(provision_profile)
  puts "\n______Provisioned devices______"

  output("Number of embedded devices: ", provision_profile.provisioned_devices.count.to_s)
  puts provision_profile.provisioned_devices
end

def check_bundle_id(provision_profile, info_plist)
  output("InfoPlist App bundle id: ", info_plist.bundle_id)
  output("Profile App bundle id: ", provision_profile.bundle_id)
  output("InfoPlist bundle id matches Profile bundle id: ", "Yes", "No",
         info_plist.bundle_id == provision_profile.bundle_id)
end

def print_provision_profile(provision_profile, info_plist)
  puts "\n______Provision profile information______"
  output("Team name: ", provision_profile.team_name)
  output("Profile display name: ", provision_profile.display_name)
  check_bundle_id(provision_profile, info_plist)

  puts "\n______Build environments______"
  output("App environment: ", provision_profile.build_environment)
  output("APNS environment: ", provision_profile.apns_environment)

  output("App and APNS on same environment: ", "Yes", "No",
         provision_profile.apns_and_app_same_environment?)

  output("APNS connection gateway: ", provision_profile.apns_gateway)

  unless provision_profile.apns_and_app_same_environment?
    puts %{\
The application was build with get-task-allow set to `#{provision_profile.task_allow?}` while \
the aps-environment is set to `#{provision_profile.apns_environment}`, To fix this issue regenerated \
the provision profile from apple developer then rebuild the app using it}.red
  end
end

def output(*args)
  label = args.first

  if args.count == 2
    success_string = failure_string = args[1]
    status = true
  elsif args.count == 3
    success_string = failure_string = args[1]
    status = args[2]
  elsif args.count == 4
    success_string = args[1]
    failure_string = args[2]
    status = args[3]
  end

  puts label + (status ? success_string.green : failure_string.red)
end